-- LAMBDA --

/*
==> t-> arrow fuction

==> stream() Aktarim demektir…

==> distinct() ==>>>  tekrarlı elemanları siler

==> filter() inside lambda expression ==>>> Filtrelemeye yarayan methoddur.
        filter(t -> t % 2 == 0) ===> cift sayi bulmak için kullanılır…

        filter(t -> t % 2 == 1) ===> tek sayi bulmak için kullanılır…

        filter(t -> t <x) ===> x ten kucuk sayi bulmak için kullanılır…
        filter(t -> t <x  && t % 2 == 0) ===> x ten kucuk  ve cift sayi bulmak için kullanılır…
        filter(t -> t <x  && t % 2 == 1) ===> x ten kucuk  ve tek sayi bulmak için kullanılır…

        filter(t -> t >x) ===> x ten buyuk sayi bulmak için kullanılır…
        filter(t -> t <x  && t % 2 == 0) ===> x ten buyuk  ve cift sayi bulmak için kullanılır…
        filter(t -> t <x  && t % 2 == 1) ===> x ten buyuk  ve tek sayi bulmak için kullanılır…

        filter(t->t.startsWith("A")).map(String::toUpperCase)  Buyuk A ile başlayan harfler
        filter(t->t.startsWith("s")).map(String::toLowerCase)  Kucuk a ile başlayan harfler
        filter(t->t.startsWith("A")||t.endsWith("i"))  “A” ie baslayip “i” ile bitenler


==> map() inside lambda expression ==>>> Matematiksel işlemler  ve değişiklikler yapmaya yarayan method…
        map(t->t*t) elemanlarin karelerini almak için kullanılır…
        map(t->t*t*t) elemanlarin kuplerini almak için kullanılır…
        map(t->t/2) elemanlari 2 ye bolmek için kullanılır…
        map(t->t.toUppercase()) //// map(String::toUpperCase) elemanlari elemanlari buyuk harf yapmak için kullanılır…


==> foreach() ==>>>  yazdırma bitiriş elemanı(terminal bitiş elemanı)

==> reduce() çoklu elemanı 1 elemana düşürmek için kullanılır. (terminal bitiş elemanı) kullanılışı…
Foreach içine olmaz.. Sout içine alinir tum detaylarla beraber…
        reduce(0 , (t,u)-> x+y) toplama yaparak tek bir elemana dönüştürmek için kullanılır…
       *** Toplama da  “0” başlangıç değeridir. Toplam için “0” kullaniriz…
       *** Math clasından methodları kullanırkende toplama için  Math:: addExatc
       *** reduce(0,Math::addExact) seklinde kullanılır…

        reduce(1 , (t,u)-> x*y) çarpma yaparak tek bir elemana dönüştürmek için kullanılır…
       *** Carpma da “1” başlangıç değeridir. Carpma için “1” kullaniriz…
       *** Math clasından methodları kullanırkende carpma için  Math::multiply
       *** reduce(1,Math::multiply) seklinde kullanılır…

        reduce(Integer.MAX_VALUE, Math::max)  En buyuk elemani bulmak için
        System.out.println(l.stream().reduce(Integer.MAX_VALUE, Math::max));

        reduce(Integer. MIN_VALUE, Math::min) En kucuk elemani bulmak için
        System.out.println(l.stream().reduce(Integer.MIN_VALUE, Math::min));

        reduce(0, Integer::sum)  integer sayilari toplamak için kullanılır…
        reduce(1, Math::multiplyExact)  integer sayilari carpmak için kullanılır…


==> sorted () ==>>> list i natural order a göre sıralar. Kucukten büyüğe a dan z ye doğru sıralama yapmak için kullanılır…
        l.stream().sorted().forEach(t-> System.out.print(t+" "));

==> sorted(Comparator.reverseOrder())  ==>>> büyükten küçüğe yani sorted() a gore tersten sıralamak istersek, Comparator class ından reverseOrder() metoduyla yapabiliriz…
       l.stream().sorted(Comparator.reverseOrder()).forEach(t-> System.out.print(t+" "));

==> sorted(Comparator.comparing(t-> t.length())) ==>>> elemanları kendi istediğimiz bir duruma göre sıralamak istediğimizde kullaniriz...
       l.stream().sorted(Comparator.comparing(String::length)).forEach()  küçükten büyüğe doğru
       l.stream().sorted(Comparator.comparing(String::length).reversed()).forEach()  büyükten kucuge doğru
       sorted(Comparator.comparing(t->t.substring(t.length()-1)))  son harfe gore sirlama…
       sorted(Comparator.comparing(String::length).thenComparing(t->t.substring(0,1)))  ilk harfe gore siralama



==> collect(Collectors.toList()) ==>>>> liste çevirmek için kullaniriz…
Istersek bunu bir liste assign edebiliriz ya da yazdırdığımız methodun return type ını list<Integer> yaparak return yapabiliriz.

==> Method reference da bizim oluşturduğumuz methodları veya java methodlarını kullanırız…
*** method reference syntax ==>>> ClassName : : methodName şeklinde yazdırabiliriz.

==> limit () içine koyduğumuz değer kadar eleman getirir. Fakat baştan başlar. limit(4) dersek 1,2,3,4. elemanlarını getirir.
        l.stream().limit(4).forEach(methodLambda01::bosluklaYazdir);  sıralama yapmadan ilk 4 eleman
        l.stream().sorted().limit(4).forEach(methodLambda01::bosluklaYazdir);  sıralama yaptıktan sonra  ilk 4 eleman

==> skip() içine koyduğumuz değer kadar elemanı atlar  ve diğerlerini getirir. Fakat baştan başlar. skip(4) dersek ilk 4 elemanı atlayip 5,6,7,8. elemanlarını getirir.
        l.stream().skip(4).forEach(methodLambda01::bosluklaYazdir);  sıralama yapmadan ilk 4 ten sonraki elemanlar
        l.stream().sorted().limit(4).forEach(methodLambda01::bosluklaYazdir);  sıralama yaptıktan sonra ilk 4 ten sonraki elemanlar

==> allMatch(): bütün elemanlarda olmasını istediğimiz şeyleri yazarız sonuç boolean verir
        Orneğin String bir list için==> allMatch(t -> t.length() < 7)  elemanların hepsinin uzunluğu 7 den küçükse true, biri bile değilse false

==> noneMatch():hiçbir elemanda olmasın istersek kullanırız, elemanların tümünde yoksa true, bir tane elemanda bile varsa false
        Orneğin ==>noneMatch(t-> t.startsWith("X"))  hiçbiri X ile başlamıyorsa true

==> anyMatch(): en az bir elemanda olmasını istediğimiz bir özellik varsa kullanırız. Sonuç boolean dır
        Orneğin==>anyMatch(t-> t.endsWith("R"))== en az bir eleman R ile bitiyorsa true, yoksa false


==> findFirst():listedeki ilk elemanı verir. Tek eleman vereceği için, foreach ile yazdırılmaz. Bütün soru syso nun içine alınarak yazdırılabilir
        System.out.println(l.stream().sorted(Comparator.comparing(String::length).reversed()).findFirst())  uzunluğa gore siralayip ilk elemani verir…


==> removeIf() nokta atisi silmek için kullanılır…
        l.removeIf(t->t.toUpperCase().startsWith("A")||t.toUpperCase().endsWith("N"))  A ile baslayip n ile biten elemanlari silmeye yarar…

==> rangeClosed() araliktaki sayilari yazdirmaya yarar…
        IntStream.rangeClosed(1,20) 1 ile 20 arasndaki sayilari yazdırmak için kullanılır…
        rangeClosed(1, 50).filter(t->t%2==0).limit(7).reduce(1, Math::multiplyExact) ilk 7 cift sayinin carpimini hesaplamak için kullanılır…
        rangeClosed(1, 50).filter(t->t%2==1).limit(7).reduce(1, Math::multiplyExact) ilk 7 tek sayinin carpimini hesaplamak için kullanılır…


==> sum()  integer sayilari toplama için kullanılır. Sout içinde yazilmalidir…

==> iterate();
        iterate(7, t -> t + 2).limit(150).sum()  6 dan buyuk ilk 150 tek sayinin toplamini bulma yöntemi…
        iterate(8, t -> t + 2).limit(150).sum()  6 dan buyuk ilk 150 cift sayinin toplamini bulma yöntemi…

==>public static int rakamlarToplami(int x) {
    int toplam = 0;
    while (x != 0) {
        toplam = toplam + x % 10;
        x = x / 10;

    }
    return toplam;
}
